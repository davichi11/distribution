/*
 * This file is generated by jOOQ.
*/
package com.distribution.pojo.tables;


import com.distribution.pojo.Distribution;
import com.distribution.pojo.Indexes;
import com.distribution.pojo.Keys;
import com.distribution.pojo.tables.records.IntegralTutorialRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IntegralTutorial extends TableImpl<IntegralTutorialRecord> {

    private static final long serialVersionUID = 117504521;

    /**
     * The reference instance of <code>distribution.integral_tutorial</code>
     */
    public static final IntegralTutorial INTEGRAL_TUTORIAL = new IntegralTutorial();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IntegralTutorialRecord> getRecordType() {
        return IntegralTutorialRecord.class;
    }

    /**
     * The column <code>distribution.integral_tutorial.id</code>.
     */
    public final TableField<IntegralTutorialRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>distribution.integral_tutorial.type_id</code>. 产品类型ID
     */
    public final TableField<IntegralTutorialRecord, String> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "产品类型ID");

    /**
     * The column <code>distribution.integral_tutorial.step</code>. 步骤
     */
    public final TableField<IntegralTutorialRecord, Integer> STEP = createField("step", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "步骤");

    /**
     * The column <code>distribution.integral_tutorial.text_describe</code>. 文字描述
     */
    public final TableField<IntegralTutorialRecord, String> TEXT_DESCRIBE = createField("text_describe", org.jooq.impl.SQLDataType.VARCHAR(200), this, "文字描述");

    /**
     * The column <code>distribution.integral_tutorial.img_describe</code>. 图片描述
     */
    public final TableField<IntegralTutorialRecord, String> IMG_DESCRIBE = createField("img_describe", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "图片描述");

    /**
     * Create a <code>distribution.integral_tutorial</code> table reference
     */
    public IntegralTutorial() {
        this(DSL.name("integral_tutorial"), null);
    }

    /**
     * Create an aliased <code>distribution.integral_tutorial</code> table reference
     */
    public IntegralTutorial(String alias) {
        this(DSL.name(alias), INTEGRAL_TUTORIAL);
    }

    /**
     * Create an aliased <code>distribution.integral_tutorial</code> table reference
     */
    public IntegralTutorial(Name alias) {
        this(alias, INTEGRAL_TUTORIAL);
    }

    private IntegralTutorial(Name alias, Table<IntegralTutorialRecord> aliased) {
        this(alias, aliased, null);
    }

    private IntegralTutorial(Name alias, Table<IntegralTutorialRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Distribution.DISTRIBUTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INTEGRAL_TUTORIAL_INTEGRAL_TUTORIAL_ID_INDEX, Indexes.INTEGRAL_TUTORIAL_INTEGRAL_TUTORIAL_TYPE_ID_INDEX, Indexes.INTEGRAL_TUTORIAL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IntegralTutorialRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INTEGRAL_TUTORIAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IntegralTutorialRecord> getPrimaryKey() {
        return Keys.KEY_INTEGRAL_TUTORIAL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IntegralTutorialRecord>> getKeys() {
        return Arrays.<UniqueKey<IntegralTutorialRecord>>asList(Keys.KEY_INTEGRAL_TUTORIAL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IntegralTutorial as(String alias) {
        return new IntegralTutorial(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IntegralTutorial as(Name alias) {
        return new IntegralTutorial(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IntegralTutorial rename(String name) {
        return new IntegralTutorial(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IntegralTutorial rename(Name name) {
        return new IntegralTutorial(name, null);
    }
}
